"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
import environ
from pathlib import Path
from datetime import timedelta

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False),
    RENDER_EXTERNAL_HOSTNAME = (bool, False),
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Take environment variables from .env file
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# TODO: SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # third party apps
    'rest_framework',
    'storages',
    'rest_framework.authtoken',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders',
    'django_filters',
    # my internal apps
    'base',
    'utils',
    'active_directory',
    'uniauth',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "corsheaders.middleware.CorsMiddleware",
]

ROOT_URLCONF = 'tigerbook.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tigerbook.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env('DATABASE_NAME'),
        'USER': env('DATABASE_USER'),
        'PASSWORD': env('DATABASE_PASS'),
        'HOST': env('DATABASE_HOST'),
        'PORT': env('DATABASE_PORT'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

MEDIA_URL = '/media/'
STATIC_URL = '/django_static/'
STATIC_ROOT = BASE_DIR / 'django_static'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CAS settings
AUTHENTICATION_BACKENDS = [
    # 'uniauth.backends.CasIdOrLinkedEmailBackend',
    'uniauth.backends.CASBackend',
]

LOGIN_URL = "/accounts/login/"
PASSWORD_RESET_TIMEOUT_DAYS = 3

# Custom settings
UNIAUTH_ALLOW_SHARED_EMAILS = False  # Enforce single email address for one profile
UNIAUTH_ALLOW_STANDALONE_ACCOUNTS = True

# TODO: setup service account later for tigerbook@princeton.edu
UNIAUTH_FROM_EMAIL = env('EMAIL_HOST_USER')
UNIAUTH_LOGIN_DISPLAY_STANDARD = False
UNIAUTH_LOGIN_DISPLAY_CAS = True

# TODO: set to UI URL address later (tigerbook.tigerapps.org)
if DEBUG:
    UNIAUTH_LOGIN_REDIRECT_URL = env('UNIAUTH_LOGIN_REDIRECT_URL_DEV')
else:
    UNIAUTH_LOGIN_REDIRECT_URL = env('UNIAUTH_LOGIN_REDIRECT_URL_PROD')
UNIAUTH_LOGOUT_REDIRECT_URL = env('UNIAUTH_LOGOUT_REDIRECT_URL')

UNIAUTH_LOGOUT_CAS_COMPLETELY = env('UNIAUTH_LOGOUT_CAS_COMPLETELY')
UNIAUTH_MAX_LINKED_EMAILS = 20
UNIAUTH_PERFORM_RECURSIVE_MERGING = False

UNIAUTH_USE_JWT_AUTH = True

# email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
# TODO: change to sendgrid later
EMAIL_HOST = 'smtp-mail.outlook.com'
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')

# TODO: add keys for OIT Active Directory
OIT_CONSUMER_KEY = env('OIT_CONSUMER_KEY')
OIT_CONSUMER_SECRET = env('OIT_CONSUMER_SECRET')
OIT_BASE_URL = env('OIT_BASE_URL')
OIT_REFRESH_TOKEN_URL = env('OIT_REFRESH_TOKEN_URL')

# TODO: add configuration for AWS S3
USE_S3 = env('USE_S3') == 'TRUE'

if USE_S3:
    # aws settings
    AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME')
    AWS_DEFAULT_ACL = None
    AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
    # aws public settings
    PUBLIC_MEDIA_DEFAULT_ACL = 'public-read'
    PUBLIC_MEDIA_LOCATION = 'static/public'
    # aws private res college settings
    PRIVATE_RS_COLLEGE_FB_MEDIA_DEFAULT_ACL = 'private'
    PRIVATE_RS_COLLEGE_FB_MEDIA_LOCATION = 'static/private/rs-college-fb'
    # aws private tigerbook settings
    PRIVATE_TIGERBOOK_MEDIA_DEFAULT_ACL = 'private'
    PRIVATE_UNDERGRADUATE_TIGERBOOK_MEDIA_LOCATION = 'static/private/tigerbook/undergraduate'
    PRIVATE_GRADUATE_TIGERBOOK_MEDIA_LOCATION = 'static/private/tigerbook/graduate'
    PRIVATE_UNDERGRADUATE_ALUMNI_TIGERBOOK_MEDIA_LOCATION = 'static/private/tigerbook/undergraduate-alumni'
    PRIVATE_GRADUATE_ALUMNI_TIGERBOOK_MEDIA_LOCATION = 'static/private/tigerbook/graduate-alumni'
    PRIVATE_EXTRACURRICULARS_TIGERBOOK_MEDIA_LOCATION = 'static/private/tigerbook/extracurriculars'

# TODO: rest framework auth
auth_classes = [
    'rest_framework_simplejwt.authentication.JWTAuthentication',
    "rest_framework.authentication.SessionAuthentication",
]

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated"
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": auth_classes,
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    ),
    # "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    # "PAGE_SIZE": 10
}

# TODO: simple jwt auth
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=5),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=5),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": True,
}

ALLOWED_HOSTS = [
    '127.0.0.1',
    '0.0.0.0',
    'localhost',
    'api.tiger-book.com',
    'www.api.tiger-book.com',
]

RENDER_EXTERNAL_HOSTNAME = env('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CSRF_TRUSTED_ORIGINS = ['https://tiger-book.com',
                        'https://www.tiger-book.com',
                        'http://localhost:3000', ]
CSRF_COOKIE_NAME = "csrftoken"
CSRF_COOKIE_HTTPONLY = False
CORS_EXPOSE_HEADERS = ["Content-Type", "X-CSRFToken"]

# TODO: pu statuses

PU_STATUS_FACULTY = 'fac'
PU_STATUS_UNDERGRADUATE = 'undergraduate'
PU_STATUS_GRADUATE = 'graduate'
PU_STATUS_STAFF = 'stf'
PU_STATUS_SERVICE_ACCOUNT = '#sv'

# TODO: tigerbook admin netids

TIGERBOOK_ADMIN_NETIDS = env('TIGERBOOK_ADMIN_NETIDS').split(',')
